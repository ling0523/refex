!function(t,Q){"object"==typeof exports&&"object"==typeof module?module.exports=Q():"function"==typeof define&&define.amd?define([],Q):"object"==typeof exports?exports.Refex=Q():t.Refex=Q()}(window,function(){return function(t){var Q={};function F(B){if(Q[B])return Q[B].exports;var c=Q[B]={i:B,l:!1,exports:{}};return t[B].call(c.exports,c,c.exports,F),c.l=!0,c.exports}return F.m=t,F.c=Q,F.d=function(t,Q,B){F.o(t,Q)||Object.defineProperty(t,Q,{enumerable:!0,get:B})},F.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},F.t=function(t,Q){if(1&Q&&(t=F(t)),8&Q)return t;if(4&Q&&"object"==typeof t&&t&&t.__esModule)return t;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:t}),2&Q&&"string"!=typeof t)for(var c in t)F.d(B,c,function(Q){return t[Q]}.bind(null,c));return B},F.n=function(t){var Q=t&&t.__esModule?function(){return t.default}:function(){return t};return F.d(Q,"a",Q),Q},F.o=function(t,Q){return Object.prototype.hasOwnProperty.call(t,Q)},F.p="",F(F.s=1)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 虚拟节点\r\n */\nvar VNode = function () {\n\tfunction VNode(tag, attrs, cls, directives, events, text, id, nodeType) {\n\t\t_classCallCheck(this, VNode);\n\n\t\t//标签名称\n\t\tthis.tag = tag;\n\t\t//属性集合\n\t\tthis.attrs = attrs;\n\t\t//样式类集合\n\t\tthis.cls = cls;\n\t\t//指令集合\n\t\tthis.directives = directives;\n\t\t//事件集合\n\t\tthis.events = events;\n\t\t//节点文字\n\t\tthis.text = text;\n\t\t//节点id\n\t\tthis.id = id;\n\t\t//节点类型\n\t\tthis.nodeType = nodeType;\n\t\t//父虚拟节点\n\t\tthis.parent = undefined;\n\t\t//子虚拟节点列表\n\t\tthis.children = [];\n\t\t//是否克隆节点\n\t\tthis.isCloned = false;\n\t\t//对应的真实dom\n\t\tthis.elm = undefined;\n\t\t//是否渲染\n\t\tthis.if = true;\n\t\t//for指令遍历数据\n\t\tthis.forData = {};\n\t\t//for指令遍历数据的解析结果\n\t\tthis.forRes = {};\n\t\t//是否使用了if指令\n\t\tthis.useIf = false;\n\t\t//是否使用了else-if指令\n\t\tthis.useElseIf = false;\n\t\t//是否使用了else指令\n\t\tthis.useElse = false;\n\t}\n\n\t/**\r\n  * 处理for指令克隆节点\r\n  * @param {State} state State实例\r\n  */\n\n\n\t_createClass(VNode, [{\n\t\tkey: 'dealFor',\n\t\tvalue: function dealFor(state) {\n\t\t\tvar _this = this;\n\n\t\t\t//该节点含有for指令，即需要进行克隆处理\n\t\t\tif (this.directives['for']) {\n\t\t\t\tvar _parent$children;\n\n\t\t\t\t//设置作用域\n\t\t\t\tvar scope = state._getOriginalData(state.$data);\n\t\t\t\tObject.assign(scope, this.getForData());\n\t\t\t\t//解析for指令表达式\n\t\t\t\tvar res = this.parseFor(scope, this.directives['for'].exp);\n\t\t\t\t//表达式不合法\n\t\t\t\tif (!res) {\n\t\t\t\t\tthrow new Error('Invalid @for expression: ' + this.directives['for'].exp);\n\t\t\t\t}\n\t\t\t\t//原directives集合中去除for\n\t\t\t\tdelete this.directives['for'];\n\t\t\t\t//获取当前虚拟节点在父节点中的位置\n\t\t\t\tvar dex = this.getIndex();\n\t\t\t\t//创建一个空数组存放克隆的节点\n\t\t\t\tvar cloneVnodes = [];\n\t\t\t\t//如果循环的是数组\n\t\t\t\tif (Array.isArray(res.for)) {\n\t\t\t\t\tvar length = res.for.length;\n\t\t\t\t\t//遍历数组\n\t\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\t\t//克隆节点\n\t\t\t\t\t\tvar copyVn = this.clone(i, res, i);\n\t\t\t\t\t\t//设置父节点\n\t\t\t\t\t\tcopyVn.parent = this.parent;\n\t\t\t\t\t\t//加入数组中\n\t\t\t\t\t\tcloneVnodes.push(copyVn);\n\t\t\t\t\t\t//递归处理子节点的for指令\n\t\t\t\t\t\tcopyVn.children.forEach(function (childVnode) {\n\t\t\t\t\t\t\tchildVnode.dealFor(state);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//如果循环的是对象\n\t\t\t\telse if (_typeof(res.for) == 'object' && res.for) {\n\t\t\t\t\t\t//遍历对象\n\t\t\t\t\t\tObject.keys(res.for).forEach(function (key, index) {\n\t\t\t\t\t\t\t//克隆节点\n\t\t\t\t\t\t\tvar copyVn = _this.clone(index, res, index, key);\n\t\t\t\t\t\t\t//设置父节点\n\t\t\t\t\t\t\tcopyVn.parent = _this.parent;\n\t\t\t\t\t\t\t//加入数组\n\t\t\t\t\t\t\tcloneVnodes.push(copyVn);\n\t\t\t\t\t\t\t//递归处理子节点的for指令\n\t\t\t\t\t\t\tcopyVn.children.forEach(function (childVnode) {\n\t\t\t\t\t\t\t\tchildVnode.dealFor(state);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t//删除该节点，添加克隆的节点\n\t\t\t\t(_parent$children = this.parent.children).splice.apply(_parent$children, [dex, 1].concat(cloneVnodes));\n\t\t\t}\n\t\t\t//该节点无需进行克隆处理，进行递归遍历子节点\n\t\t\telse {\n\t\t\t\t\tthis.children.forEach(function (childVnode) {\n\t\t\t\t\t\tchildVnode.dealFor(state);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * 虚拟节点的数据初始化：将一个未初始化的虚拟节点转为含有真实数据的虚拟节点\r\n   * @param {State} state State实例\r\n   */\n\n\t}, {\n\t\tkey: 'init',\n\t\tvalue: function init(state) {\n\t\t\t//设置作用域\n\t\t\tvar scope = state._getOriginalData(state.$data);\n\t\t\tObject.assign(scope, this.getForData());\n\t\t\t//元素节点进行初始化\n\t\t\tif (this.nodeType == 1) {\n\t\t\t\t//if指令提取出来，单独作为if属性\n\t\t\t\tif (this.directives['if']) {\n\t\t\t\t\t//使用if时同时存在else-if、else则报错\n\t\t\t\t\tif (this.directives['else-if'] || this.directives['else']) {\n\t\t\t\t\t\tthrow new Error('\"@if\" and \"@else-if\" and \"@else\" cannot be used on the same node');\n\t\t\t\t\t}\n\t\t\t\t\t//解析指令的表达式值\n\t\t\t\t\tthis.if = this.parseExpression(scope, this.directives['if'].exp);\n\t\t\t\t\t//进行标记\n\t\t\t\t\tthis.useIf = true;\n\t\t\t\t\t//从指令集合移除\n\t\t\t\t\tdelete this.directives['if'];\n\t\t\t\t}\n\n\t\t\t\t//else-if指令提取出来，单独作为if属性\n\t\t\t\tif (this.directives['else-if']) {\n\t\t\t\t\t//使用else-if时同时存在else则报错\n\t\t\t\t\tif (this.directives['else']) {\n\t\t\t\t\t\tthrow new Error('\"@else-if\" and \"@else\" cannot be used on the same node');\n\t\t\t\t\t}\n\t\t\t\t\t//获取上一个兄弟节点\n\t\t\t\t\tvar brotherNode = this.getPrevBrotherNode();\n\t\t\t\t\t//上一个兄弟节点不存在或者没有使用@if则直接报错\n\t\t\t\t\tif (!brotherNode || !brotherNode.useIf) {\n\t\t\t\t\t\tthrow new Error('\"@else-if\" cannot be used alone');\n\t\t\t\t\t}\n\t\t\t\t\t//上一个兄弟节点的if为true则不渲染\n\t\t\t\t\tif (brotherNode.if) {\n\t\t\t\t\t\tthis.if = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//解析指令的表达式值\n\t\t\t\t\t\tthis.if = this.parseExpression(scope, this.directives['else-if'].exp);\n\t\t\t\t\t}\n\t\t\t\t\t//进行标记\n\t\t\t\t\tthis.useElseIf = true;\n\t\t\t\t\t//从指令集合移除\n\t\t\t\t\tdelete this.directives['else-if'];\n\t\t\t\t}\n\n\t\t\t\t//else指令提取出来，单独作为if属性\n\t\t\t\tif (this.directives['else']) {\n\t\t\t\t\t//获取上一个兄弟节点\n\t\t\t\t\tvar _brotherNode = this.getPrevBrotherNode();\n\t\t\t\t\t//上一个兄弟节点不存在或者没有使用@if和@else-if，则直接报错\n\t\t\t\t\tif (!_brotherNode || !_brotherNode.useIf && !_brotherNode.useElseIf) {\n\t\t\t\t\t\tthrow new Error('\"@else\" cannot be used alone');\n\t\t\t\t\t}\n\t\t\t\t\t//上一个兄弟节点使用的是@if\n\t\t\t\t\tif (_brotherNode.useIf) {\n\t\t\t\t\t\tif (_brotherNode.if) {\n\t\t\t\t\t\t\tthis.if = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.if = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//上一个兄弟节点使用的是@else-if\n\t\t\t\t\telse if (_brotherNode.useElseIf) {\n\t\t\t\t\t\t\t//获取该节点的上一个兄弟节点\n\t\t\t\t\t\t\tvar brotherNode2 = _brotherNode.getPrevBrotherNode();\n\t\t\t\t\t\t\t//该节点的上一个兄弟节点没有使用@if直接报错\n\t\t\t\t\t\t\tif (!brotherNode2 || !brotherNode2.useIf) {\n\t\t\t\t\t\t\t\tthrow new Error('\"@else\" cannot be used alone');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (_brotherNode.if || brotherNode2.if) {\n\t\t\t\t\t\t\t\tthis.if = false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.if = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t//进行标记\n\t\t\t\t\tthis.useElse = true;\n\t\t\t\t\t//从指令集合移除\n\t\t\t\t\tdelete this.directives['else'];\n\t\t\t\t}\n\n\t\t\t\t//解析其他指令\n\t\t\t\tfor (var name in this.directives) {\n\t\t\t\t\t//指令未定义报错\n\t\t\t\t\tif (!state.$directives[name]) {\n\t\t\t\t\t\tthrow new Error('The @' + name + ' directive is undefined');\n\t\t\t\t\t}\n\t\t\t\t\t//存储表达式对应的真实的值\n\t\t\t\t\tthis.directives[name] = {\n\t\t\t\t\t\texp: this.directives[name].exp,\n\t\t\t\t\t\tmodifier: this.directives[name].modifier,\n\t\t\t\t\t\tvalue: this.parseExpression(scope, this.directives[name].exp)\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t//初始化属性\n\t\t\t\tvar attrs = {};\n\t\t\t\tfor (var attr in this.attrs) {\n\t\t\t\t\tvar realAttrName = '';\n\t\t\t\t\tvar realAttrValue = null;\n\t\t\t\t\t//真实属性名称解析\n\t\t\t\t\trealAttrName = this.parseText(scope, attr);\n\t\t\t\t\t//判断属性值是否只是一对{{}}\n\t\t\t\t\tvar matchArray = this.attrs[attr].match(/^\\{\\{(.*?)\\}\\}$/g);\n\t\t\t\t\t//一对{{}}\n\t\t\t\t\tif (matchArray) {\n\t\t\t\t\t\tvar endIndex = this.attrs[attr].trim().length - 2;\n\t\t\t\t\t\tvar exp = this.attrs[attr].trim().substring(2, endIndex);\n\t\t\t\t\t\t//解析成数据\n\t\t\t\t\t\trealAttrValue = this.parseExpression(scope, exp);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//直接解析为字符串\n\t\t\t\t\t\trealAttrValue = this.parseText(scope, this.attrs[attr]);\n\t\t\t\t\t}\n\t\t\t\t\t//属性为空字符串的话，直接设为true\n\t\t\t\t\tif (realAttrValue === '') {\n\t\t\t\t\t\trealAttrValue = true;\n\t\t\t\t\t}\n\t\t\t\t\tattrs[realAttrName] = realAttrValue;\n\t\t\t\t}\n\t\t\t\tthis.attrs = attrs;\n\n\t\t\t\t//初始化样式，此时this.cls为字符串\n\t\t\t\tif (this.cls) {\n\t\t\t\t\t//判断样式值是否只是一对{{}}\n\t\t\t\t\tvar clsMatchArray = this.cls.match(/^\\{\\{(.*?)\\}\\}$/g);\n\t\t\t\t\tvar cls = {};\n\t\t\t\t\t//一对{{}}\n\t\t\t\t\tif (clsMatchArray) {\n\t\t\t\t\t\tvar _endIndex = this.cls.trim().length - 2;\n\t\t\t\t\t\tvar _exp = this.cls.trim().substring(2, _endIndex);\n\t\t\t\t\t\t//解析成数据\n\t\t\t\t\t\tvar data = this.parseExpression(scope, _exp);\n\t\t\t\t\t\t//如果是数组，转为对象\n\t\t\t\t\t\tif (Array.isArray(data)) {\n\t\t\t\t\t\t\tdata.forEach(function (item) {\n\t\t\t\t\t\t\t\tcls[item] = true;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//如果是对象直接存储\n\t\t\t\t\t\telse if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) == 'object' && data) {\n\t\t\t\t\t\t\t\tcls = Object.assign({}, data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//如果是字符串\n\t\t\t\t\t\t\telse if (typeof data == 'string' && data) {\n\t\t\t\t\t\t\t\t\tcls[data] = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//其他情况\n\t\t\t\t\telse {\n\t\t\t\t\t\t\t//直接解析为字符串后以空格划分为数组，然后转为对象\n\t\t\t\t\t\t\tthis.parseText(scope, this.cls).split(/\\s+/g).forEach(function (item) {\n\t\t\t\t\t\t\t\tcls[item] = true;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\tthis.cls = cls;\n\t\t\t\t} else {\n\t\t\t\t\tthis.cls = {};\n\t\t\t\t}\n\n\t\t\t\t//初始化事件\n\t\t\t\tfor (var eventName in this.events) {\n\t\t\t\t\tthis.events[eventName] = this.eventHandler(scope, eventName);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//文本节点初始化\n\t\t\telse if (this.nodeType == 3) {\n\t\t\t\t\tthis.text = this.parseText(scope, this.text);\n\t\t\t\t}\n\t\t\t//递归对子节点进行初始化\n\t\t\tthis.children.forEach(function (childVnode) {\n\t\t\t\tchildVnode.init(state);\n\t\t\t});\n\t\t}\n\n\t\t/**\r\n   * 事件数据初始化，返回事件方法、修饰符和回调参数\r\n   * @param {Object} scope \r\n   * @param {String} eventName\r\n   */\n\n\t}, {\n\t\tkey: 'eventHandler',\n\t\tvalue: function eventHandler(scope, eventName) {\n\t\t\tvar _this2 = this;\n\n\t\t\t//定义处理函数\n\t\t\tvar handler = null;\n\t\t\t//定义回调参数\n\t\t\tvar params = [];\n\t\t\t//获取修饰符\n\t\t\tvar modifier = this.events[eventName].modifier;\n\t\t\tif (!this.events[eventName].handler) {\n\t\t\t\tthrow new TypeError('The value of #' + eventName + ' shoud not be undefined');\n\t\t\t}\n\t\t\t//判断是否有参数\n\t\t\tvar res = /(.*)+\\((.*)\\)/g.exec(this.events[eventName].handler);\n\t\t\t//有参数\n\t\t\tif (res) {\n\t\t\t\t//解析函数\n\t\t\t\thandler = this.parseExpression(scope, res[1]);\n\t\t\t\t//获取参数\n\t\t\t\tif (res[2]) {\n\t\t\t\t\tparams = res[2].split(',').map(function (value) {\n\t\t\t\t\t\treturn _this2.parseExpression(scope, value);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t//无参数\n\t\t\telse {\n\t\t\t\t\t//解析函数\n\t\t\t\t\thandler = this.parseExpression(scope, this.events[eventName].handler);\n\t\t\t\t\t//如果解析结果不是函数，则直接作为字符串带过去\n\t\t\t\t\tif (typeof handler != 'function') {\n\t\t\t\t\t\thandler = this.events[eventName].handler;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\treturn {\n\t\t\t\thandler: handler,\n\t\t\t\tparams: params,\n\t\t\t\tmodifier: modifier\n\t\t\t};\n\t\t}\n\n\t\t/**\r\n   * 处理组件渲染\r\n   * @param {State} state state实例\r\n   */\n\n\t}, {\n\t\tkey: 'dealComponent',\n\t\tvalue: function dealComponent(state) {\n\t\t\t//获取组件的名称\n\t\t\tvar name = this.tag.toLocaleLowerCase();\n\t\t\t//如果该组件名称为自定义组件\n\t\t\tif (state.$components[name]) {\n\t\t\t\t//获取自定义属性\n\t\t\t\tvar props = {};\n\t\t\t\tfor (var key in this.attrs) {\n\t\t\t\t\tif (state.$components[name].props.includes(key)) {\n\t\t\t\t\t\tprops[key] = this.attrs[key];\n\t\t\t\t\t\tdelete this.attrs[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//获取自定义组件的注册函数的返回值\n\t\t\t\tvar template = state.$components[name].render.apply(state.$data, [props]);\n\t\t\t\t//如果不返回任何值直接报错\n\t\t\t\tif (!template) {\n\t\t\t\t\tthrow new Error('The template for component \"' + name + '\" is invalid');\n\t\t\t\t}\n\t\t\t\tvar vnode = null;\n\t\t\t\t//如果返回值是字符串，则表示通过模板渲染组件\n\t\t\t\tif (typeof template == 'string') {\n\t\t\t\t\tvar div = document.createElement('div');\n\t\t\t\t\tdiv.innerHTML = template.trim();\n\t\t\t\t\t//只取第一个节点作为组件根元素\n\t\t\t\t\tvar el = div.childNodes[0];\n\t\t\t\t\t//只能创建元素节点\n\t\t\t\t\tif (el.nodeType != 1) {\n\t\t\t\t\t\tthrow new TypeError('The template for component \"' + name + '\" is invalid');\n\t\t\t\t\t}\n\t\t\t\t\t//调用state的_compile方法构建该元素的虚拟节点树\n\t\t\t\t\tvnode = state._compile(this.id, el);\n\t\t\t\t\t//虚拟节点树的for循环处理\n\t\t\t\t\tvnode.dealFor(state);\n\t\t\t\t\t//初始化虚拟节点树\n\t\t\t\t\tvnode.init(state);\n\t\t\t\t}\n\t\t\t\t//如果是对象，则表示通过h函数创建组件\n\t\t\t\telse if ((typeof template === 'undefined' ? 'undefined' : _typeof(template)) == 'object') {\n\t\t\t\t\t\t//创建一个虚拟节点，此时虚拟节点的数据都是初始化后的，无需再次初始化\n\t\t\t\t\t\tvnode = new VNode(template.tag, template.attrs, template.cls, template.directives, template.events, undefined, this.id, 1);\n\t\t\t\t\t\t//创建其子节点\n\t\t\t\t\t\tvnode.createChildrenVnodes(template);\n\t\t\t\t\t\t//设置虚拟节点是否渲染\n\t\t\t\t\t\tvnode.if = template._if;\n\t\t\t\t\t}\n\t\t\t\t//当虚拟节点创建完毕\n\t\t\t\tif (vnode) {\n\t\t\t\t\t//递归进行组件渲染\n\t\t\t\t\tvnode.dealComponent(state);\n\t\t\t\t\t//设置父节点\n\t\t\t\t\tvnode.parent = this.parent;\n\t\t\t\t\t//合并原节点和新建节点的事件集\n\t\t\t\t\tvnode.events = Object.assign(vnode.events, this.events);\n\t\t\t\t\t//合并原节点和新建节点的指令集\n\t\t\t\t\tvnode.directives = Object.assign(vnode.directives, this.directives);\n\t\t\t\t\t//合并原节点和新建节点的样式类集\n\t\t\t\t\tvnode.cls = Object.assign(vnode.cls, this.cls);\n\t\t\t\t\t//合并非自定义属性的属性集\n\t\t\t\t\tvnode.attrs = Object.assign(vnode.attrs, this.attrs);\n\t\t\t\t\t//插入当前节点的位置，并删除当前节点\n\t\t\t\t\tvar index = this.getIndex();\n\t\t\t\t\tthis.parent.children.splice(index, 1, vnode);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//非自定义组件则递归遍历子节点，进行相同的处理\n\t\t\telse {\n\t\t\t\t\tthis.children.forEach(function (childVnode) {\n\t\t\t\t\t\tchildVnode.dealComponent(state);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * 根据template对象创建子节点\r\n   * @param {Object} template\r\n   */\n\n\t}, {\n\t\tkey: 'createChildrenVnodes',\n\t\tvalue: function createChildrenVnodes(template) {\n\t\t\tvar _this3 = this;\n\n\t\t\t//text属性明确不存在时，根据slots来创建子节点\n\t\t\tif (template.text === undefined || template.text === null) {\n\t\t\t\ttemplate.slots.forEach(function (slot, i) {\n\t\t\t\t\t//创建一个已经初始化完毕的虚拟节点\n\t\t\t\t\tvar vnode = new VNode(slot.tag, slot.attrs, slot.cls, slot.directives, slot.events, undefined, _this3.id + '_' + i, 1);\n\t\t\t\t\t_this3.children.push(vnode);\n\t\t\t\t\tvnode.createChildrenVnodes(slot);\n\t\t\t\t});\n\t\t\t}\n\t\t\t//根据text创建子节点\n\t\t\telse {\n\t\t\t\t\tvar textNode = document.createTextNode(template.text);\n\t\t\t\t\tvar vnode = new VNode(textNode.nodeName, {}, {}, {}, {}, template.text, this.id + '_0', textNode.nodeType);\n\t\t\t\t\tthis.children = [vnode];\n\t\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * 触发自定义指令的钩子函数(只有旧节点执行)\r\n   * @param {State} state State实例\r\n   * @param {String} hook 钩子名称 \r\n   * @param {Boolean} handlerChildren 是否处理子节点指令，默认为true\r\n   */\n\n\t}, {\n\t\tkey: 'dealDirectives',\n\t\tvalue: function dealDirectives(state, hook) {\n\t\t\tvar handlerChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n\t\t\t//如果该节点为不渲染节点，直接返回\n\t\t\tif (!this.if) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//该节点非元素节点，直接返回\n\t\t\tif (this.nodeType != 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//遍历指令集合\n\t\t\tfor (var name in this.directives) {\n\t\t\t\t//获取指令的钩子函数集合\n\t\t\t\tvar handler = state.$directives[name];\n\t\t\t\t//回调参数设置\n\t\t\t\tvar data = [];\n\t\t\t\t//获取表达式\n\t\t\t\tvar exp = this.directives[name].exp;\n\t\t\t\t//获取修饰符\n\t\t\t\tvar modifier = this.directives[name].modifier;\n\t\t\t\t//获取值\n\t\t\t\tvar value = this.directives[name].value;\n\t\t\t\t//beforeMount和unmounted钩子函数的回调参数无el元素\n\t\t\t\tif (hook == 'beforeMount' || hook == 'unmounted') {\n\t\t\t\t\t//回调参数为value,modifier,exp,vnode\n\t\t\t\t\tdata = [value, modifier, exp, this];\n\t\t\t\t} else {\n\t\t\t\t\t//回调参数为el,value,modifier,exp,vnode\n\t\t\t\t\tdata = [this.elm, value, modifier, exp, this];\n\t\t\t\t}\n\t\t\t\t//如果该钩子函数存在直接调用\n\t\t\t\tif (handler[hook]) {\n\t\t\t\t\thandler[hook].apply(state.$data, data);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//递归调用进行子节点指令处理\n\t\t\tif (handlerChildren) {\n\t\t\t\tthis.children.forEach(function (childVnode) {\n\t\t\t\t\tchildVnode.dealDirectives(state, hook);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * 生成真实dom(只有旧节点执行)\r\n   * @param {State} state State实例对象\r\n   */\n\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render(state) {\n\t\t\tvar _this4 = this;\n\n\t\t\tvar el = null;\n\t\t\t//如果不渲染此节点，则直接创建一个注释节点\n\t\t\tif (!this.if) {\n\t\t\t\tthis.elm = document.createComment('@if');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// 元素节点\n\t\t\tif (this.nodeType == 1) {\n\t\t\t\t//创建元素\n\t\t\t\tel = document.createElement(this.tag);\n\t\t\t\t//设置样式\n\t\t\t\tvar cls = [];\n\t\t\t\tfor (var item in this.cls) {\n\t\t\t\t\tif (this.cls[item]) {\n\t\t\t\t\t\tcls.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cls.length) {\n\t\t\t\t\tel.setAttribute('class', cls.join(' '));\n\t\t\t\t}\n\t\t\t\t//设置属性\n\t\t\t\tfor (var attr in this.attrs) {\n\t\t\t\t\t//获取属性值\n\t\t\t\t\tvar val = this.attrs[attr];\n\t\t\t\t\t//val只要不是false、null、undefined则设置属性\n\t\t\t\t\tif (!(val === false || val === null || val === undefined)) {\n\t\t\t\t\t\t//属性值明确为true时，则直接设置属性而不设置值\n\t\t\t\t\t\tif (val === true) {\n\t\t\t\t\t\t\tval = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//属性值为对象，则转为字符串\n\t\t\t\t\t\tif ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {\n\t\t\t\t\t\t\tval = JSON.stringify(val);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//其他情况直接转字符串\n\t\t\t\t\t\tval = String(val);\n\t\t\t\t\t\t//设置属性\n\t\t\t\t\t\tel.setAttribute(attr, val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//设置事件\n\n\t\t\t\tvar _loop = function _loop(eventName) {\n\t\t\t\t\tel.addEventListener(eventName, function (e) {\n\t\t\t\t\t\t//self修饰符\n\t\t\t\t\t\tif (_this4.events[eventName].modifier && _this4.events[eventName].modifier.includes('self')) {\n\t\t\t\t\t\t\tif (e.currentTarget != e.target) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//stop修饰符\n\t\t\t\t\t\tif (_this4.events[eventName].modifier && _this4.events[eventName].modifier.includes('stop')) {\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//prevent修饰符\n\t\t\t\t\t\tif (_this4.events[eventName].modifier && _this4.events[eventName].modifier.includes('prevent') && e.cancelable) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof _this4.events[eventName].handler == 'function') {\n\t\t\t\t\t\t\t//事件回调参数第一个永远固定为event，后面则是定义的参数\n\t\t\t\t\t\t\t_this4.events[eventName].handler.apply(state.$data, [e].concat(_toConsumableArray(_this4.events[eventName].params)));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar h = _this4.executeExpression(state.$data, _this4.events[eventName].handler);\n\t\t\t\t\t\t\th(state.$data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, {\n\t\t\t\t\t\tonce: _this4.events[eventName].modifier && _this4.events[eventName].modifier.includes('once'),\n\t\t\t\t\t\tcapture: _this4.events[eventName].modifier && _this4.events[eventName].modifier.includes('capture'),\n\t\t\t\t\t\tpassive: _this4.events[eventName].modifier && _this4.events[eventName].modifier.includes('passive')\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tfor (var eventName in this.events) {\n\t\t\t\t\t_loop(eventName);\n\t\t\t\t}\n\t\t\t\t//遍历子节点\n\t\t\t\tthis.children.forEach(function (childVNode) {\n\t\t\t\t\t//对子节点进行render处理\n\t\t\t\t\tchildVNode.render(state);\n\t\t\t\t\t//子节点元素加入父节点\n\t\t\t\t\tel.appendChild(childVNode.elm);\n\t\t\t\t});\n\t\t\t}\n\t\t\t//文本节点\n\t\t\telse if (this.nodeType == 3) {\n\t\t\t\t\tel = document.createTextNode(this.text);\n\t\t\t\t}\n\t\t\t\t//注释节点\n\t\t\t\telse if (this.nodeType == 8) {\n\t\t\t\t\t\tel = document.createComment(this.text);\n\t\t\t\t\t}\n\t\t\tthis.elm = el;\n\t\t}\n\n\t\t/**\r\n   * 判断身为新旧节点的两个节点是否值得比较\r\n   * @param {VNode} oldVNode\r\n   */\n\n\t}, {\n\t\tkey: 'isSame',\n\t\tvalue: function isSame(oldVnode) {\n\t\t\treturn this.tag === oldVnode.tag && this.nodeType === oldVnode.nodeType && this.if === oldVnode.if && this.useIf === oldVnode.useIf && this.useElseIf === oldVnode.useElseIf && this.useElse === oldVnode.useElse;\n\t\t}\n\n\t\t/**\r\n   * 跟旧节点相比，获取指定字段新增、修改和移除的值\r\n   * @param {VNode} oldVnode 旧虚拟节点\r\n   * @param {String} key 指定字段，如attrs\r\n   * @param {Number} type 0表示获取修改的，1表示新增的，2表示获取移除的 \r\n   */\n\n\t}, {\n\t\tkey: 'compare',\n\t\tvalue: function compare(oldVnode, key, type) {\n\t\t\tvar res = {};\n\t\t\tif (type == 0) {\n\t\t\t\tfor (var item in this[key]) {\n\t\t\t\t\tif (oldVnode[key].hasOwnProperty(item) && JSON.stringify(oldVnode[key][item]) !== JSON.stringify(this[key][item])) {\n\t\t\t\t\t\tres[item] = this[key][item];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (type == 1) {\n\t\t\t\tfor (var _item in this[key]) {\n\t\t\t\t\tif (!oldVnode[key].hasOwnProperty(_item)) {\n\t\t\t\t\t\tres[_item] = this[key][_item];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (type == 2) {\n\t\t\t\tfor (var _item2 in oldVnode[key]) {\n\t\t\t\t\t//如果新节点没有\n\t\t\t\t\tif (!this[key].hasOwnProperty(_item2)) {\n\t\t\t\t\t\tres[_item2] = oldVnode[key][_item2];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\n\t\t/**\r\n   * 获取当前节点及父/祖先节点的forData\r\n   */\n\n\t}, {\n\t\tkey: 'getForData',\n\t\tvalue: function getForData() {\n\t\t\tvar data = {};\n\t\t\tObject.assign(data, this.forData);\n\t\t\tif (this.parent) {\n\t\t\t\tObject.assign(data, this.parent.getForData());\n\t\t\t}\n\t\t\treturn data;\n\t\t}\n\n\t\t/**\r\n   * 获取当前节点及父/祖先节点的forRes\r\n   */\n\n\t}, {\n\t\tkey: 'getForRes',\n\t\tvalue: function getForRes() {\n\t\t\tvar data = [];\n\t\t\tvar obj = this;\n\t\t\twhile (obj) {\n\t\t\t\tif (JSON.stringify(obj.forRes) != '{}') {\n\t\t\t\t\tvar res = Object.assign({}, obj.forRes);\n\t\t\t\t\tdata.unshift(res);\n\t\t\t\t}\n\t\t\t\tobj = obj.parent;\n\t\t\t}\n\t\t\treturn data;\n\t\t}\n\n\t\t/**\r\n   * 复制该节点(只有新节点执行，且该新节点是已经初始化的节点)\r\n   */\n\n\t}, {\n\t\tkey: 'copy',\n\t\tvalue: function copy() {\n\t\t\tvar id = this.id;\n\t\t\tvar tag = this.tag;\n\t\t\tvar directives = Object.assign({}, this.directives);\n\t\t\tvar attrs = Object.assign({}, this.attrs);\n\t\t\tvar cls = Object.assign({}, this.cls);\n\t\t\tvar events = Object.assign({}, this.events);\n\t\t\tvar text = this.text;\n\t\t\tvar nodeType = this.nodeType;\n\t\t\tvar vnode = new VNode(tag, attrs, cls, directives, events, text, id, nodeType);\n\t\t\tvnode.if = this.if;\n\t\t\tvnode.isCloned = this.isCloned;\n\t\t\tvnode.forData = Object.assign({}, this.forData);\n\t\t\tvnode.forRes = Object.assign({}, this.forRes);\n\t\t\tvnode.useIf = this.useIf;\n\t\t\tvnode.useElseIf = this.useElseIf;\n\t\t\tvnode.useElse = this.useElse;\n\t\t\tvar children = [];\n\t\t\t//遍历子节点进行复制\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = this.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar child = _step.value;\n\n\t\t\t\t\tvar newChild = child.copy();\n\t\t\t\t\t//子节点的父节点设为新复制的节点\n\t\t\t\t\tnewChild.parent = vnode;\n\t\t\t\t\tchildren.push(newChild);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvnode.children = children;\n\t\t\treturn vnode;\n\t\t}\n\n\t\t/**\r\n   * 克隆一个节点(节点尚未初始化)\r\n   * @param {Number} i 节点在父节点中的序列\r\n   * @param {Object} res for循环的数据\r\n   * @param {Number} index for循环克隆时的序列\r\n   * @param {String} key for循环的key\r\n   */\n\n\t}, {\n\t\tkey: 'clone',\n\t\tvalue: function clone(i, res, index, key) {\n\t\t\tvar id = this.id + '_copy_' + i;\n\t\t\tvar tag = this.tag;\n\t\t\tvar directives = Object.assign({}, this.directives);\n\t\t\tvar attrs = Object.assign({}, this.attrs);\n\t\t\tvar cls = this.cls;\n\t\t\tvar events = Object.assign({}, this.events);\n\t\t\tvar text = this.text;\n\t\t\tvar nodeType = this.nodeType;\n\t\t\t//创建新节点\n\t\t\tvar vnode = new VNode(tag, attrs, cls, directives, events, text, id, nodeType);\n\t\t\t//设置克隆属性\n\t\t\tvnode.isCloned = true;\n\t\t\t//forData赋值\n\t\t\tif (key) {\n\t\t\t\tvnode.forData[res.item] = res.for[key];\n\t\t\t\tvnode.forData[res.index] = index;\n\t\t\t\tvnode.forData[res.key] = key;\n\t\t\t} else {\n\t\t\t\tvnode.forData[res.item] = res.for[index];\n\t\t\t\tvnode.forData[res.index] = index;\n\t\t\t}\n\t\t\t//forRes赋值\n\t\t\tvnode.forRes = Object.assign({}, res);\n\t\t\t//克隆其子节点\n\t\t\tvar children = [];\n\t\t\tfor (var k in this.children) {\n\t\t\t\tvar newChild = this.children[k].clone(k, res, index, key);\n\t\t\t\tnewChild.parent = vnode;\n\t\t\t\tchildren.push(newChild);\n\t\t\t}\n\t\t\tvnode.children = children;\n\t\t\treturn vnode;\n\t\t}\n\n\t\t/**\r\n   * 判断当前节点与旧节点是否相等(只有新节点执行，且新旧节点都已经初始化)\r\n   * @param {Object} oldVnode\r\n   */\n\n\t}, {\n\t\tkey: 'equal',\n\t\tvalue: function equal(oldVnode) {\n\t\t\tif (this.id != oldVnode.id || this.tag != oldVnode.tag || this.nodeType != oldVnode.nodeType || this.if != oldVnode.if || this.isCloned != oldVnode.isCloned || this.useIf != oldVnode.useIf || this.useElseIf != oldVnode.useElseIf || this.useElse != oldVnode.useElse) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (this.nodeType == 1) {\n\t\t\t\tif (JSON.stringify(this.attrs) != JSON.stringify(oldVnode.attrs)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (JSON.stringify(this.cls) != JSON.stringify(oldVnode.cls)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (JSON.stringify(this.directives) != JSON.stringify(oldVnode.directives)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (JSON.stringify(this.events) != JSON.stringify(oldVnode.events)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (this.children.length != oldVnode.children.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn this.children.every(function (child, index) {\n\t\t\t\t\treturn child.equal(oldVnode.children[index]);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (this.text != oldVnode.text) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\r\n   * 获取上一个兄弟元素节点\r\n   */\n\n\t}, {\n\t\tkey: 'getPrevBrotherNode',\n\t\tvalue: function getPrevBrotherNode() {\n\t\t\t//获取当前节点在父节点的位置\n\t\t\tvar index = this.getIndex();\n\t\t\tif (index <= 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tvar brotherNode = this.parent.children[index - 1];\n\t\t\tif (brotherNode.nodeType != 1) {\n\t\t\t\tbrotherNode = brotherNode.getPrevBrotherNode();\n\t\t\t}\n\t\t\treturn brotherNode;\n\t\t}\n\n\t\t/**\r\n   * 获取虚拟节点在父节点中的序列\r\n   */\n\n\t}, {\n\t\tkey: 'getIndex',\n\t\tvalue: function getIndex() {\n\t\t\tvar index = -1;\n\t\t\tif (this.parent) {\n\t\t\t\tvar length = this.parent.children.length;\n\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\tif (this.parent.children[i] === this) {\n\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn index;\n\t\t}\n\n\t\t/**\r\n   * 解析for指令数据\r\n   * @param {Object} scope\r\n   * @param {String} expression\r\n   */\n\n\t}, {\n\t\tkey: 'parseFor',\n\t\tvalue: function parseFor(scope, expression) {\n\t\t\tvar match = expression.match(/([^]*?)\\s+(?:in|of)\\s+([^]*)/);\n\t\t\tif (!match) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar forObj = this.parseExpression(scope, match[2].trim());\n\t\t\tvar alias = match[1].trim().replace(/[\\(\\)]/g, '').trim().split(',');\n\t\t\tvar res = {\n\t\t\t\tfor: forObj,\n\t\t\t\titem: alias[0].trim(),\n\t\t\t\texp: match[2].trim()\n\t\t\t\t//遍历的是数组\n\t\t\t};if (Array.isArray(forObj)) {\n\t\t\t\tif (alias.length > 1) {\n\t\t\t\t\tres.index = alias[1].trim();\n\t\t\t\t} else {\n\t\t\t\t\tres.index = 'index';\n\t\t\t\t}\n\t\t\t}\n\t\t\t//遍历对象\n\t\t\telse if ((typeof forObj === 'undefined' ? 'undefined' : _typeof(forObj)) == 'object' && forObj) {\n\t\t\t\t\tif (alias.length > 1) {\n\t\t\t\t\t\tres.key = alias[1].trim();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.key = 'key';\n\t\t\t\t\t}\n\t\t\t\t\tif (alias.length > 2) {\n\t\t\t\t\t\tres.index = alias[2].trim();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres.index = 'index';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\treturn res;\n\t\t}\n\n\t\t/**\r\n   * 解析含{{}}字符串\r\n   * @param {Object} scope\r\n   * @param {String} text\r\n   */\n\n\t}, {\n\t\tkey: 'parseText',\n\t\tvalue: function parseText(scope, text) {\n\t\t\tvar _this5 = this;\n\n\t\t\treturn text.replace(/\\{\\{(.*?)\\}\\}/g, function (match, expression) {\n\t\t\t\tvar res = _this5.parseExpression(scope, expression.trim());\n\t\t\t\tif ((typeof res === 'undefined' ? 'undefined' : _typeof(res)) === 'object') {\n\t\t\t\t\treturn JSON.stringify(res);\n\t\t\t\t}\n\t\t\t\treturn String(res);\n\t\t\t});\n\t\t}\n\n\t\t/**\r\n   * 解析字符串表达式，计算结果\r\n   * @param {Object} scope 作用域对象\r\n   * @param {String} expression 表达式字符串\r\n   */\n\n\t}, {\n\t\tkey: 'parseExpression',\n\t\tvalue: function parseExpression(scope, expression) {\n\t\t\tvar code = '';\n\t\t\t//动态生成变量声明代码\n\t\t\tfor (var key in scope) {\n\t\t\t\tcode += 'let ' + key + ' = scope[\\'' + key + '\\'];';\n\t\t\t}\n\t\t\tcode += 'return ' + expression;\n\t\t\t//在代码块的前后追加代码声明\n\t\t\tvar nf = new Function(\"scope\", code);\n\t\t\t//执行代码块并且返回结果\n\t\t\treturn nf(scope);\n\t\t}\n\n\t\t/**\r\n   * 返回事件指向的表达式字符串封装函数，用于事件值为表达式的情况\r\n   * @param {Object} scope\r\n   * @param {Object} expression\r\n   */\n\n\t}, {\n\t\tkey: 'executeExpression',\n\t\tvalue: function executeExpression(scope, expression) {\n\t\t\tvar code = '';\n\t\t\t//动态生成变量声明代码\n\t\t\tfor (var key in scope) {\n\t\t\t\tcode += 'let ' + key + ' = scope[\\'' + key + '\\'];';\n\t\t\t}\n\t\t\tcode += expression + ';';\n\t\t\tfor (var _key in scope) {\n\t\t\t\tcode += 'scope[\\'' + _key + '\\'] = ' + _key + ';';\n\t\t\t}\n\t\t\t//在代码块的前后追加代码声明\n\t\t\tvar nf = new Function(\"scope\", code);\n\t\t\t//执行代码块并且返回结果\n\t\t\treturn nf;\n\t\t}\n\t}]);\n\n\treturn VNode;\n}();\n\nmodule.exports = VNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar State = __webpack_require__(2);\nvar VNode = __webpack_require__(0);\n\nmodule.exports = {\n\t/**\r\n  * 构建响应式数据对象\r\n  * @param {Object} data\r\n  */\n\tproxy: function proxy(data) {\n\t\tif (!data || (typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {\n\t\t\tthrow new TypeError('The argument to \"proxy\" must be an object');\n\t\t}\n\t\treturn new State(data);\n\t},\n\n\t/**\r\n  * 使用响应式数据对象\r\n  * @param {Object} state\r\n  */\n\tuseProxy: function useProxy(state) {\n\t\tif (!(state instanceof State)) {\n\t\t\tthrow new TypeError('The argument to \"useProxy\" must be an instance of State');\n\t\t}\n\t\treturn state.$data;\n\t},\n\n\t/**\r\n  * 返回构建VNode所必须的参数\r\n  * @param {Object} tag\r\n  * @param {Object} options\r\n  */\n\th: function h(tag, options) {\n\t\t//判断tag参数是否为空\n\t\tif (!tag) {\n\t\t\tthrow new TypeError('The tag name is undefined');\n\t\t}\n\t\t//判断tag参数是否为字符串\n\t\tif (typeof tag != 'string') {\n\t\t\tthrow new TypeError('The tag name should be a string');\n\t\t}\n\n\t\t//判断options参数\n\t\tif ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) != 'object' || !options) {\n\t\t\toptions = {};\n\t\t}\n\n\t\t//tag转为小写\n\t\ttag = tag.toLocaleLowerCase();\n\n\t\t//属性参数校验\n\t\tvar attrs = options.attrs || {};\n\n\t\t//样式类校验，支持数组、对象和字符串，最终转为对象\n\t\tvar cls = {};\n\t\tif (Array.isArray(options.cls)) {\n\t\t\toptions.cls.forEach(function (item) {\n\t\t\t\tcls[item] = true;\n\t\t\t});\n\t\t} else if (_typeof(options.cls) == 'object' && options.cls) {\n\t\t\tcls = Object.assign({}, options.cls);\n\t\t} else if (typeof options.cls == 'string' && options.cls) {\n\t\t\tcls[options.cls] = true;\n\t\t} else {\n\t\t\tcls = {};\n\t\t}\n\n\t\t//指令集合，key为指令名称，值为指令参数，包含value和modifier两个数值，如：{ model:{value:333,modifier:'value'} }\n\t\tvar directives = options.directives || {};\n\n\t\t//事件集合，如：{ click:function(){} }\n\t\tvar tmpEvents = options.events || {};\n\t\tvar events = {};\n\t\tfor (var eventName in tmpEvents) {\n\t\t\tevents[eventName] = {\n\t\t\t\thandler: tmpEvents[eventName],\n\t\t\t\tparams: [],\n\t\t\t\tmodifier: undefined\n\t\t\t};\n\t\t}\n\n\t\t//指定创建的元素的文本内容\n\t\tvar text = options.text;\n\n\t\t//子节点数据，每个子节点也可以是h函数返回的数据\n\t\tvar slots = options.slots || [];\n\n\t\t//是否渲染该节点，只有if明确为false时才会不进行渲染\n\t\tvar _if = options.if === false ? false : true;\n\n\t\treturn {\n\t\t\ttag: tag,\n\t\t\tattrs: attrs,\n\t\t\tcls: cls,\n\t\t\tdirectives: directives,\n\t\t\tevents: events,\n\t\t\ttext: text,\n\t\t\tslots: slots,\n\t\t\t_if: _if\n\t\t};\n\t},\n\n\t/**\r\n  * 根据字符串表达式获取真实的值\r\n  * @param {Object} state\r\n  * @param {Object} vnode\r\n  * @param {Object} exp\r\n  */\n\tparse: function parse(state, vnode, exp) {\n\t\tif (!(state instanceof State)) {\n\t\t\tthrow new TypeError('The first argument to \"parse\" must be an instance of State');\n\t\t}\n\t\tif (!(vnode instanceof VNode)) {\n\t\t\tthrow new TypeError('The second argument to \"parse\" must be an instance of VNode');\n\t\t}\n\t\tif (!exp) {\n\t\t\tthrow new TypeError('The string expression does not exist');\n\t\t}\n\t\tif (typeof exp != 'string') {\n\t\t\tthrow new TypeError('The string expression should be a string');\n\t\t}\n\t\t//设置作用域\n\t\tvar scope = Object.assign({}, state.$data);\n\t\tObject.assign(scope, vnode.getForData());\n\t\treturn vnode.parseExpression(scope, exp);\n\t}\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VNode = __webpack_require__(0);\nvar customDirectives = __webpack_require__(3);\n/**\r\n * 数据状态管理\r\n */\n\nvar State = function () {\n\tfunction State(data) {\n\t\t_classCallCheck(this, State);\n\n\t\t//响应数据\n\t\tthis.$data = this._toProxy([], data || {});\n\t\t//监听器数组\n\t\tthis.$watchers = {};\n\t\t//挂载相关的虚拟节点\n\t\tthis.$vnode = null;\n\t\t//旧的虚拟节点\n\t\tthis._vnode = null;\n\t\t//保存的初始未渲染元素\n\t\tthis.$template = null;\n\t\t//指令集合\n\t\tthis.$directives = {};\n\t\t//组件集合\n\t\tthis.$components = {};\n\t\t//生命周期钩子函数\n\t\tthis.onBeforeMount = function () {};\n\t\tthis.onMounted = function () {};\n\t\tthis.onBeforeUpdate = function () {};\n\t\tthis.onUpdated = function () {};\n\t\t//初始化操作\n\t\tthis._init();\n\t}\n\n\t/**\r\n  * 初始化的一些处理\r\n  */\n\n\n\t_createClass(State, [{\n\t\tkey: '_init',\n\t\tvalue: function _init() {\n\t\t\t//注册一些指令\n\t\t\tfor (var name in customDirectives) {\n\t\t\t\tthis.directive(name, customDirectives[name]);\n\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * 注册/获取自定义组件\r\n   * @param {Object} name 组件名称\r\n   * @param {Object} handler 组件注册参数\r\n   */\n\n\t}, {\n\t\tkey: 'component',\n\t\tvalue: function component(name, handler) {\n\t\t\t//handler不存在则表示获取自定义组件\n\t\t\tif (!handler) {\n\t\t\t\t//name不存在，表示获取该state的所有自定义组件\n\t\t\t\tif (!name) {\n\t\t\t\t\treturn this.$components;\n\t\t\t\t}\n\t\t\t\t//获取指定名称的自定义组件\n\t\t\t\treturn this.$components[name];\n\t\t\t}\n\n\t\t\t//以下为注册自定义组件的实现\n\n\t\t\t//组件名不存在报错\n\t\t\tif (!name) {\n\t\t\t\tthrow new TypeError('You need to give the component a name');\n\t\t\t}\n\t\t\t//组件重复定义报错\n\t\t\tif (this.$components[name]) {\n\t\t\t\tthrow new Error('The component named \"' + name + '\" is already defined');\n\t\t\t}\n\t\t\tvar props = [];\n\t\t\tvar render = null;\n\t\t\t//组件注册参数为函数\n\t\t\tif (typeof handler == 'function') {\n\t\t\t\trender = handler;\n\t\t\t} else if ((typeof handler === 'undefined' ? 'undefined' : _typeof(handler)) == 'object' && handler) {\n\t\t\t\tprops = handler.props || [];\n\t\t\t\trender = handler.render;\n\t\t\t}\n\t\t\tif (typeof render != 'function') {\n\t\t\t\tthrow new TypeError('The component named \"' + name + '\" need to define a handling method');\n\t\t\t}\n\t\t\t//注册该组件\n\t\t\tthis.$components[name] = {\n\t\t\t\tprops: props,\n\t\t\t\trender: render\n\t\t\t};\n\t\t}\n\n\t\t/**\r\n   * 注册/获取自定义指令\r\n   * @param {String} name 指令名称\r\n   * @param {Object} handler 指令注册参数\r\n   */\n\n\t}, {\n\t\tkey: 'directive',\n\t\tvalue: function directive(name, handler) {\n\t\t\t//handler不存在则表示获取自定义的指令\n\t\t\tif (!handler) {\n\t\t\t\t//name不存在，表示获取该state的所有自定义指令\n\t\t\t\tif (!name) {\n\t\t\t\t\treturn this.$directives;\n\t\t\t\t}\n\t\t\t\t//获取指定名称的自定义组件\n\t\t\t\treturn this.$directives[name];\n\t\t\t}\n\n\t\t\t//以下为注册自定义指令的实现\n\n\t\t\t//指令名称不存在报错\n\t\t\tif (!name) {\n\t\t\t\tthrow new TypeError('You need to give the directive a name');\n\t\t\t}\n\t\t\t//指令重复定义报错\n\t\t\tif (this.$directives[name]) {\n\t\t\t\tthrow new Error('The directive named \"' + name + '\" is already defined');\n\t\t\t}\n\t\t\t//指令钩子函数\n\t\t\tvar beforeMount = function beforeMount() {};\n\t\t\tvar mounted = function mounted() {};\n\t\t\tvar beforeUpdate = function beforeUpdate() {};\n\t\t\tvar updated = function updated() {};\n\t\t\tvar beforeUnmount = function beforeUnmount() {};\n\t\t\tvar unmounted = function unmounted() {};\n\t\t\t//如果指令注册参数是一个函数，表示mounted函数\n\t\t\tif (typeof handler == 'function') {\n\t\t\t\tmounted = handler;\n\t\t\t}\n\t\t\t//如果指令注册参数是一个对象，进行相对的赋值\n\t\t\telse if ((typeof handler === 'undefined' ? 'undefined' : _typeof(handler)) == 'object' && handler) {\n\t\t\t\t\tbeforeMount = handler.beforeMount || function () {};\n\t\t\t\t\tmounted = handler.mounted || function () {};\n\t\t\t\t\tbeforeUpdate = handler.beforeUpdate || function () {};\n\t\t\t\t\tupdated = handler.updated || function () {};\n\t\t\t\t\tbeforeUnmount = handler.beforeUnmount || function () {};\n\t\t\t\t\tunmounted = handler.unmounted || function () {};\n\t\t\t\t}\n\t\t\t//注册指令\n\t\t\tthis.$directives[name] = {\n\t\t\t\tbeforeMount: beforeMount,\n\t\t\t\tmounted: mounted,\n\t\t\t\tbeforeUpdate: beforeUpdate,\n\t\t\t\tupdated: updated,\n\t\t\t\tbeforeUnmount: beforeUnmount,\n\t\t\t\tunmounted: unmounted\n\t\t\t};\n\t\t}\n\n\t\t//----------------------------------------------------------------------\n\t\t//以下方法是实现vnode相关的\n\t\t//----------------------------------------------------------------------\n\n\t\t/**\r\n   * 实现挂载\r\n   * @param {Element} el 挂载元素\r\n   */\n\n\t}, {\n\t\tkey: 'mount',\n\t\tvalue: function mount(el) {\n\t\t\t//beforeMount生命周期函数触发\n\t\t\tif (typeof this.onBeforeMount == 'function') {\n\t\t\t\tthis.onBeforeMount.apply(this.$data);\n\t\t\t}\n\t\t\t//校验参数\n\t\t\tif (!el) {\n\t\t\t\tthrow new Error('You must specify an element to mount');\n\t\t\t}\n\t\t\tif (typeof el == 'string') {\n\t\t\t\tel = document.body.querySelector(el);\n\t\t\t}\n\t\t\tif (!(el instanceof Node && el.nodeType === 1)) {\n\t\t\t\tthrow new TypeError('The mount element is undefined');\n\t\t\t}\n\t\t\t//保存最早的el元素\n\t\t\tthis.$template = el.cloneNode(true);\n\t\t\t//生成未初始化的虚拟节点\n\t\t\tthis.$vnode = this._compile('vnode', el);\n\t\t\t//处理for指令进行节点克隆\n\t\t\tthis.$vnode.dealFor(this);\n\t\t\t//初始化虚拟节点，进行数据绑定赋值\n\t\t\tthis.$vnode.init(this);\n\t\t\t//处理自定义组件的渲染\n\t\t\tthis.$vnode.dealComponent(this);\n\t\t\t//保存到旧节点树\n\t\t\tthis._vnode = this.$vnode.copy();\n\t\t\t//触发自定义指令的beforeMount钩子函数\n\t\t\tthis._vnode.dealDirectives(this, 'beforeMount');\n\t\t\t//进行dom渲染，生成新的dom\n\t\t\tthis._vnode.render(this);\n\t\t\t//将新的dom插入同时删除旧的dom\n\t\t\tel.parentNode.insertBefore(this._vnode.elm, el);\n\t\t\tel.remove();\n\t\t\t//触发自定义指令的mounted\n\t\t\tthis._vnode.dealDirectives(this, 'mounted');\n\t\t\t//mounted生命周期函数触发\n\t\t\tif (typeof this.onMounted == 'function') {\n\t\t\t\tthis.onMounted.apply(this.$data);\n\t\t\t}\n\t\t\t//返回state对象\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\r\n   * 将一个指定的元素及其子孙节点构造成一个虚拟dom树(此时虚拟dom未初始化数据)\r\n   * @param {String} id id\r\n   * @param {Node} el 目标元素\r\n   */\n\n\t}, {\n\t\tkey: '_compile',\n\t\tvalue: function _compile(id, el) {\n\t\t\tvar vnode = null;\n\t\t\t//元素节点\n\t\t\tif (el.nodeType == 1) {\n\t\t\t\t//定义属性的集合\n\t\t\t\tvar attrs = {};\n\t\t\t\t//定义指令的集合\n\t\t\t\tvar directives = {};\n\t\t\t\t//定义事件的集合\n\t\t\t\tvar events = {};\n\t\t\t\t//定义样式类字段\n\t\t\t\tvar cls = '';\n\t\t\t\t//遍历该元素的所有属性\n\t\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\t\tvar _didIteratorError = false;\n\t\t\t\tvar _iteratorError = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator = el.attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\t\tvar item = _step.value;\n\n\t\t\t\t\t\t//@开头解析为指令\n\t\t\t\t\t\tif (item.nodeName.startsWith('@')) {\n\t\t\t\t\t\t\t//查找修饰符的位置\n\t\t\t\t\t\t\tvar index = item.nodeName.indexOf(':');\n\t\t\t\t\t\t\t//存在修饰符\n\t\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\t\t//指令名称\n\t\t\t\t\t\t\t\tvar directiveName = item.nodeName.substr(1, index - 1);\n\t\t\t\t\t\t\t\t//修饰符字段\n\t\t\t\t\t\t\t\tvar modifier = item.nodeName.substr(index + 1);\n\t\t\t\t\t\t\t\t//加入指令集合\n\t\t\t\t\t\t\t\tif (directiveName) {\n\t\t\t\t\t\t\t\t\tdirectives[directiveName] = {\n\t\t\t\t\t\t\t\t\t\tmodifier: modifier || undefined,\n\t\t\t\t\t\t\t\t\t\texp: item.nodeValue\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//不存在修饰符\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t//指令名称\n\t\t\t\t\t\t\t\t\tvar _directiveName = item.nodeName.substr(1);\n\t\t\t\t\t\t\t\t\tif (_directiveName) {\n\t\t\t\t\t\t\t\t\t\t//加入指令集合\n\t\t\t\t\t\t\t\t\t\tdirectives[_directiveName] = {\n\t\t\t\t\t\t\t\t\t\t\tmodifier: undefined,\n\t\t\t\t\t\t\t\t\t\t\texp: item.nodeValue\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//#开头解析为事件\n\t\t\t\t\t\telse if (item.nodeName.startsWith('#')) {\n\t\t\t\t\t\t\t\t//事件解析，可能存在修饰符\n\t\t\t\t\t\t\t\tvar res = item.nodeName.substr(1).split('.');\n\t\t\t\t\t\t\t\t//获取事件名称\n\t\t\t\t\t\t\t\tvar eventName = res[0];\n\t\t\t\t\t\t\t\t//加入事件集合\n\t\t\t\t\t\t\t\tevents[eventName] = {\n\t\t\t\t\t\t\t\t\thandler: item.nodeValue,\n\t\t\t\t\t\t\t\t\tmodifier: res.filter(function (item, index) {\n\t\t\t\t\t\t\t\t\t\treturn index > 0;\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//样式class单独提取出来\n\t\t\t\t\t\t\telse if (item.nodeName == 'class') {\n\t\t\t\t\t\t\t\t\tcls = item.nodeValue.trim();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//普通属性，忽略refx-cloak属性\n\t\t\t\t\t\t\t\telse if (item.nodeName != 'refex-cloak') {\n\t\t\t\t\t\t\t\t\t\tattrs[item.nodeName] = item.nodeValue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//创建虚拟节点\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError = true;\n\t\t\t\t\t_iteratorError = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvnode = new VNode(el.nodeName.toLocaleLowerCase(), attrs, cls, directives, events, undefined, id, el.nodeType);\n\t\t\t\t//获取目标元素子节点\n\t\t\t\tvar nodes = el.childNodes;\n\t\t\t\t//子节点长度\n\t\t\t\tvar length = nodes.length;\n\t\t\t\t//遍历子节点\n\t\t\t\tfor (var i = 0; i < length; i++) {\n\t\t\t\t\t//递归调用本方法进行子节点的创建\n\t\t\t\t\tvar vn = this._compile(id + '_' + i, nodes[i]);\n\t\t\t\t\t//如果创建成功\n\t\t\t\t\tif (vn) {\n\t\t\t\t\t\t//设置父节点\n\t\t\t\t\t\tvn.parent = vnode;\n\t\t\t\t\t\t//加入到父节点下\n\t\t\t\t\t\tvnode.children.push(vn);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//文本节点或者注释节点\n\t\t\telse if (el.nodeType == 3 || el.nodeType == 8) {\n\t\t\t\t\t//直接创建\n\t\t\t\t\tvnode = new VNode(el.nodeName.toLocaleLowerCase(), {}, '', {}, {}, el.nodeValue, id, el.nodeType);\n\t\t\t\t}\n\t\t\treturn vnode;\n\t\t}\n\n\t\t/**\r\n   * 更新虚拟节点\r\n   * @param {Array} key\r\n   * @param {Object} newValue\r\n   * @param {Object} oldValue\r\n   */\n\n\t}, {\n\t\tkey: '_updateVnodes',\n\t\tvalue: function _updateVnodes(key, newValue, oldValue) {\n\t\t\t//更新虚拟节点树\n\t\t\tthis.$vnode = this._compile('vnode', this.$template);\n\t\t\t//处理for指令进行节点克隆\n\t\t\tthis.$vnode.dealFor(this);\n\t\t\t//初始化节点树\n\t\t\tthis.$vnode.init(this);\n\t\t\t//处理自定义组件的渲染\n\t\t\tthis.$vnode.dealComponent(this);\n\t\t\t//新旧根节点比较\n\t\t\tthis._updateVnode(this.$vnode, this._vnode);\n\t\t}\n\n\t\t/**\r\n   * 比较节点进行更新\r\n   * @param {VNode} newVnode\r\n   * @param {VNode} oldVnode\r\n   */\n\n\t}, {\n\t\tkey: '_updateVnode',\n\t\tvalue: function _updateVnode(newVnode, oldVnode) {\n\t\t\t//如果这两个节点值得比较\n\t\t\tif (newVnode.isSame(oldVnode)) {\n\t\t\t\t//节点是否更新\n\t\t\t\tvar isUpdate = !newVnode.equal(oldVnode);\n\t\t\t\t//如果节点更新，先触发指令的beforeUpdate钩子函数\n\t\t\t\tif (isUpdate) {\n\t\t\t\t\toldVnode.dealDirectives(this, 'beforeUpdate', false);\n\t\t\t\t}\n\t\t\t\t//元素节点\n\t\t\t\tif (newVnode.nodeType == 1 && oldVnode.if) {\n\t\t\t\t\t//更新指令\n\t\t\t\t\tthis._updateDirectives(newVnode, oldVnode);\n\t\t\t\t\t//更新属性\n\t\t\t\t\tthis._updateAttrs(newVnode, oldVnode);\n\t\t\t\t\t//更新样式类\n\t\t\t\t\tthis._updateClass(newVnode, oldVnode);\n\t\t\t\t\t//更新事件\n\t\t\t\t\tthis._updateEvents(newVnode, oldVnode);\n\t\t\t\t\t//子节点进行比较\n\t\t\t\t\tthis._updateChildren(newVnode, oldVnode);\n\t\t\t\t}\n\t\t\t\t//文本节点\n\t\t\t\telse if (newVnode.nodeType == 3) {\n\t\t\t\t\t\t//更新节点文字\n\t\t\t\t\t\tthis._updateText(newVnode, oldVnode);\n\t\t\t\t\t}\n\t\t\t\t//节点更新，触发指令的updated钩子函数\n\t\t\t\tif (isUpdate) {\n\t\t\t\t\toldVnode.dealDirectives(this, 'updated', false);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//直接替换\n\t\t\telse {\n\t\t\t\t\t//复制新节点\n\t\t\t\t\tvar vnode = newVnode.copy();\n\t\t\t\t\t//获取父节点\n\t\t\t\t\tvar parent = oldVnode.parent;\n\t\t\t\t\t//更新插入的节点的父节点\n\t\t\t\t\tvnode.parent = parent;\n\t\t\t\t\t//触发自定义指令的beforeUnmount\n\t\t\t\t\toldVnode.dealDirectives(this, 'beforeUnmount');\n\t\t\t\t\t//获取旧节点在父节点中的序列\n\t\t\t\t\tvar index = oldVnode.getIndex();\n\t\t\t\t\t//删除原来的旧节点，在原来的位置上插入新建的节点\n\t\t\t\t\tparent.children.splice(index, 1, vnode);\n\t\t\t\t\t//触发自定义指令的beforeMount\n\t\t\t\t\tvnode.dealDirectives(this, 'beforeMount');\n\t\t\t\t\t//渲染该节点\n\t\t\t\t\tvnode.render(this);\n\t\t\t\t\t//将节点元素插入原来的位置\n\t\t\t\t\toldVnode.elm.parentNode.insertBefore(vnode.elm, oldVnode.elm);\n\t\t\t\t\t//删除原来的dom元素\n\t\t\t\t\toldVnode.elm.remove();\n\t\t\t\t\t//触发自定义指令的unmounted\n\t\t\t\t\toldVnode.dealDirectives(this, 'unmounted');\n\t\t\t\t\t//触发自定义指令的mounted\n\t\t\t\t\tvnode.dealDirectives(this, 'mounted');\n\t\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * 更新指令\r\n   * @param {VNode} newVnode\r\n   * @param {VNode} oldVnode\r\n   */\n\n\t}, {\n\t\tkey: '_updateDirectives',\n\t\tvalue: function _updateDirectives(newVnode, oldVnode) {\n\t\t\t//获取新增或者修改的指令\n\t\t\tvar a = newVnode.compare(oldVnode, 'directives', 0);\n\t\t\tvar b = newVnode.compare(oldVnode, 'directives', 1);\n\t\t\tvar updateDirectives = Object.assign(a, b);\n\t\t\t//进行更新操作\n\t\t\tfor (var d in updateDirectives) {\n\t\t\t\toldVnode.directives[d] = Object.assign({}, updateDirectives[d]);\n\t\t\t}\n\t\t\t//获取移除的指令\n\t\t\tvar removeDirectives = newVnode.compare(oldVnode, 'directives', 2);\n\t\t\t//进行移除操作\n\t\t\tfor (var _d in removeDirectives) {\n\t\t\t\tdelete oldVnode.directives[_d];\n\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * 更新属性\r\n   * @param {VNode} newVnode\r\n   * @param {VNode} oldVnode\r\n   */\n\n\t}, {\n\t\tkey: '_updateAttrs',\n\t\tvalue: function _updateAttrs(newVnode, oldVnode) {\n\t\t\t//获取新增或者修改的属性\n\t\t\tvar a = newVnode.compare(oldVnode, 'attrs', 0);\n\t\t\tvar b = newVnode.compare(oldVnode, 'attrs', 1);\n\t\t\tvar updateAttrs = Object.assign(a, b);\n\t\t\t//进行更新操作\n\t\t\tfor (var attr in updateAttrs) {\n\t\t\t\tvar val = updateAttrs[attr];\n\t\t\t\toldVnode.attrs[attr] = val;\n\t\t\t\t//val是false、null、undefined则移除属性\n\t\t\t\tif (val === false || val === null || val === undefined) {\n\t\t\t\t\toldVnode.elm.removeAttribute(attr);\n\t\t\t\t}\n\t\t\t\t//否则设置属性值\n\t\t\t\telse {\n\t\t\t\t\t\t//属性值明确为true时，则直接设置属性而不设置值\n\t\t\t\t\t\tif (val === true) {\n\t\t\t\t\t\t\tval = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//属性值为对象，则转为字符串\n\t\t\t\t\t\tif ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {\n\t\t\t\t\t\t\tval = JSON.stringify(val);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//其他情况直接转字符串\n\t\t\t\t\t\tval = String(val);\n\t\t\t\t\t\t//设置属性\n\t\t\t\t\t\toldVnode.elm.setAttribute(attr, val);\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t//获取移除的属性\n\t\t\tvar removeAttrs = newVnode.compare(oldVnode, 'attrs', 2);\n\t\t\t//进行移除操作\n\t\t\tfor (var _attr in removeAttrs) {\n\t\t\t\tdelete oldVnode.attrs[_attr];\n\t\t\t\toldVnode.elm.removeAttribute(_attr);\n\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * 更新样式类\r\n   * @param {VNode} newVnode\r\n   * @param {VNode} oldVnode\r\n   */\n\n\t}, {\n\t\tkey: '_updateClass',\n\t\tvalue: function _updateClass(newVnode, oldVnode) {\n\t\t\t//样式发生了变化\n\t\t\tif (JSON.stringify(newVnode.cls) != JSON.stringify(oldVnode.cls)) {\n\t\t\t\toldVnode.cls = Object.assign({}, newVnode.cls);\n\t\t\t\tvar cls = [];\n\t\t\t\tfor (var item in oldVnode.cls) {\n\t\t\t\t\tif (oldVnode.cls[item]) {\n\t\t\t\t\t\tcls.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cls.length) {\n\t\t\t\t\toldVnode.elm.setAttribute('class', cls.join(' '));\n\t\t\t\t} else {\n\t\t\t\t\toldVnode.elm.removeAttribute('class');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * 更新事件\r\n   * @param {VNode} newVnode\r\n   * @param {VNode} oldVnode\r\n   */\n\n\t}, {\n\t\tkey: '_updateEvents',\n\t\tvalue: function _updateEvents(newVnode, oldVnode) {\n\t\t\tvar _this = this;\n\n\t\t\t//获取修改的事件\n\t\t\tvar updateEvents = newVnode.compare(oldVnode, 'events', 0);\n\t\t\tfor (var eventName in updateEvents) {\n\t\t\t\toldVnode.events[eventName] = updateEvents[eventName];\n\t\t\t}\n\t\t\t//获取新增的事件\n\t\t\tvar addEvents = newVnode.compare(oldVnode, 'events', 1);\n\n\t\t\tvar _loop = function _loop(_eventName) {\n\t\t\t\toldVnode.events[_eventName] = addEvents[_eventName];\n\t\t\t\toldVnode.elm.addEventListener(_eventName, function (e) {\n\t\t\t\t\t//self修饰符\n\t\t\t\t\tif (oldVnode.events[_eventName].modifier && oldVnode.events[_eventName].modifier.includes('self')) {\n\t\t\t\t\t\tif (e.currentTarget != e.target) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//stop修饰符\n\t\t\t\t\tif (oldVnode.events[_eventName].modifier && oldVnode.events[_eventName].modifier.includes('stop')) {\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t\t//prevent修饰符\n\t\t\t\t\tif (oldVnode.events[_eventName].modifier && oldVnode.events[_eventName].modifier.includes('prevent') && e.cancelable) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\t//执行事件函数\n\t\t\t\t\tif (typeof oldVnode.events[_eventName].handler == 'function') {\n\t\t\t\t\t\t//事件回调参数第一个永远固定为event，后面则是定义的参数\n\t\t\t\t\t\toldVnode.events[_eventName].handler.apply(_this.$data, [e].concat(_toConsumableArray(oldVnode.events[_eventName].params)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar h = oldVnode.executeExpression(_this.$data, oldVnode.events[_eventName].handler);\n\t\t\t\t\t\th(_this.$data);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tonce: oldVnode.events[_eventName].modifier && oldVnode.events[_eventName].modifier.includes('once'),\n\t\t\t\t\tcapture: oldVnode.events[_eventName].modifier && oldVnode.events[_eventName].modifier.includes('capture'),\n\t\t\t\t\tpassive: oldVnode.events[_eventName].modifier && oldVnode.events[_eventName].modifier.includes('passive')\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tfor (var _eventName in addEvents) {\n\t\t\t\t_loop(_eventName);\n\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * 更新子节点\r\n   * @param {VNode} newVnode\r\n   * @param {VNode} oldVnode\r\n   */\n\n\t}, {\n\t\tkey: '_updateChildren',\n\t\tvalue: function _updateChildren(newVnode, oldVnode) {\n\t\t\tvar _this2 = this;\n\n\t\t\t//子节点数目一致\n\t\t\tif (newVnode.children.length == oldVnode.children.length) {\n\t\t\t\t//递归比较子节点\n\t\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\t\tvar _didIteratorError2 = false;\n\t\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator2 = newVnode.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\t\tvar nchild = _step2.value;\n\t\t\t\t\t\tvar _iteratorNormalCompletion3 = true;\n\t\t\t\t\t\tvar _didIteratorError3 = false;\n\t\t\t\t\t\tvar _iteratorError3 = undefined;\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfor (var _iterator3 = oldVnode.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\t\t\t\t\tvar ochild = _step3.value;\n\n\t\t\t\t\t\t\t\t//新旧节点树中只有同等id的节点才会被比较\n\t\t\t\t\t\t\t\tif (nchild.id === ochild.id) {\n\t\t\t\t\t\t\t\t\tthis._updateVnode(nchild, ochild);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t_didIteratorError3 = true;\n\t\t\t\t\t\t\t_iteratorError3 = err;\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t\t\t\t\t_iterator3.return();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t\t_iteratorError2 = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//子节点数目不一致，直接更新子节点数组，并且更新dom\n\t\t\telse {\n\t\t\t\t\toldVnode.children.forEach(function (childVnode) {\n\t\t\t\t\t\t//触发自定义指令的beforeMount\n\t\t\t\t\t\tchildVnode.dealDirectives(_this2, 'beforeUnmount');\n\t\t\t\t\t});\n\t\t\t\t\toldVnode.elm.innerHTML = '';\n\t\t\t\t\toldVnode.children.forEach(function (childVnode) {\n\t\t\t\t\t\t//触发自定义指令的unmounted\n\t\t\t\t\t\tchildVnode.dealDirectives(_this2, 'unmounted');\n\t\t\t\t\t});\n\t\t\t\t\toldVnode.children = [];\n\t\t\t\t\tnewVnode.children.forEach(function (childVnode) {\n\t\t\t\t\t\tvar copyChild = childVnode.copy();\n\t\t\t\t\t\toldVnode.children.push(copyChild);\n\t\t\t\t\t\t//触发自定义指令的beforeMount\n\t\t\t\t\t\tcopyChild.dealDirectives(_this2, 'beforeMount');\n\t\t\t\t\t\tcopyChild.render(_this2);\n\t\t\t\t\t\t//插入元素\n\t\t\t\t\t\toldVnode.elm.appendChild(copyChild.elm);\n\t\t\t\t\t\t//触发自定义指令的mounted\n\t\t\t\t\t\tcopyChild.dealDirectives(_this2, 'mounted');\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t}\n\n\t\t/**\r\n   * 更新文字\r\n   * @param {VNode} newVnode\r\n   * @param {VNode} oldVnode\r\n   */\n\n\t}, {\n\t\tkey: '_updateText',\n\t\tvalue: function _updateText(newVnode, oldVnode) {\n\t\t\tif (newVnode.text !== oldVnode.text) {\n\t\t\t\toldVnode.text = newVnode.text;\n\t\t\t\toldVnode.elm.nodeValue = oldVnode.text;\n\t\t\t}\n\t\t}\n\n\t\t//----------------------------------------------------------------------\n\t\t//以下方法是实现数据代理和变更监听的\n\t\t//----------------------------------------------------------------------\n\n\t\t/**\r\n   * 对外提供的进行监听的方法\r\n   * @param {String} property 监听属性\r\n   * @param {Function} handler 监听函数\r\n   */\n\n\t}, {\n\t\tkey: 'watch',\n\t\tvalue: function watch(property, handler) {\n\t\t\t//监听的属性未定义报错\n\t\t\tif (!property) {\n\t\t\t\tthrow new TypeError('You must specify a property to watch');\n\t\t\t}\n\t\t\t//监听的属性不是字符串\n\t\t\tif (typeof property != 'string') {\n\t\t\t\tthrow new TypeError('The watch property expected a string');\n\t\t\t}\n\t\t\t//如果监听函数非函数类型默认为空函数\n\t\t\tif (typeof handler != 'function') {\n\t\t\t\thandler = function handler() {};\n\t\t\t}\n\t\t\t//将监听属性字符串解析成特定形式的新字符串作为key\n\t\t\tvar key = this._parseProperty(property);\n\t\t\t//特定属性的监听已存在\n\t\t\tif (this.$watchers[key]) {\n\t\t\t\tthrow new Error('The watcher for \"' + property + '\" is already defined');\n\t\t\t}\n\t\t\t//注册该监听\n\t\t\tthis.$watchers[key] = handler;\n\t\t\t//返回该实例\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\r\n   * 解除监听\r\n   * @param {String} property 监听的属性\r\n   */\n\n\t}, {\n\t\tkey: 'unwatch',\n\t\tvalue: function unwatch(property) {\n\t\t\t//解除该属性监听\n\t\t\tif (typeof property == 'string') {\n\t\t\t\t//将监听属性字符串解析生成点间隔符的新字符串作为存储监听器的key\n\t\t\t\tvar key = this._parseProperty(property);\n\t\t\t\t//如果存在该key的监听器则进行移除\n\t\t\t\tif (this.$watchers[key]) {\n\t\t\t\t\tdelete this.$watchers[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//解除全部监听\n\t\t\telse {\n\t\t\t\t\tthis.$watchers = {};\n\t\t\t\t}\n\t\t\t//返回该实例\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\r\n   * 将普通对象转为proxy对象\r\n   * @param {Array} parentKeys 值为对象的元素上级父属性数组\r\n   * @param {Object} data 源数据对象\r\n   * @param {String} parentKey 值为对象的元素属性名称\r\n   */\n\n\t}, {\n\t\tkey: '_toProxy',\n\t\tvalue: function _toProxy(parentKeys, data, parentKey) {\n\t\t\tvar _this3 = this;\n\n\t\t\tvar keys = [].concat(_toConsumableArray(parentKeys));\n\t\t\tif (!this._isObject(data)) {\n\t\t\t\tthrow new TypeError('Cannot create proxy with a non-object as target or handler');\n\t\t\t}\n\t\t\tif (parentKey) {\n\t\t\t\tkeys.push(parentKey);\n\t\t\t}\n\t\t\t//遍历data的属性\n\t\t\tfor (var key in data) {\n\t\t\t\t//属性值为对象的则再次转为proxy对象\n\t\t\t\tif (this._isObject(data[key])) {\n\t\t\t\t\tdata[key] = this._toProxy(keys, data[key], key);\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar handler = {\n\t\t\t\tget: function get(target, property) {\n\t\t\t\t\treturn _this3._getter(keys, target, property);\n\t\t\t\t},\n\t\t\t\tset: function set(target, property, value) {\n\t\t\t\t\treturn _this3._setter(keys, target, property, value);\n\t\t\t\t},\n\t\t\t\tdeleteProperty: function deleteProperty(target, property) {\n\t\t\t\t\treturn _this3._setter(keys, target, property, undefined);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn new Proxy(data, handler);\n\t\t}\n\n\t\t/**\r\n   * 获取属性值监听\r\n   * @param {Array} parentKeys 父属性数组\r\n   * @param {Object} target  目标对象\r\n   * @param {String} property 目标对象的属性\r\n   */\n\n\t}, {\n\t\tkey: '_getter',\n\t\tvalue: function _getter(parentKeys, target, property) {\n\t\t\treturn Reflect.get(target, property);\n\t\t}\n\n\t\t/**\r\n   * 设置属性值监听\r\n   * @param {Array} parentKeys 父属性数组\r\n   * @param {Object} target 目标对象\r\n   * @param {String} property 属性\r\n   * @param {Object} value  属性值\r\n   */\n\n\t}, {\n\t\tkey: '_setter',\n\t\tvalue: function _setter(parentKeys, target, property, value) {\n\t\t\t//父属性数组更新\n\t\t\tvar keys = [].concat(_toConsumableArray(parentKeys));\n\t\t\tkeys.push(property);\n\t\t\t//记录旧的target\n\t\t\tvar oldTarget = null;\n\t\t\tif (Array.isArray(target)) {\n\t\t\t\toldTarget = [].concat(_toConsumableArray(target));\n\t\t\t} else if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) == 'object') {\n\t\t\t\toldTarget = Object.assign({}, target);\n\t\t\t}\n\t\t\t//记录旧的value\n\t\t\tvar oldValue = target[property];\n\t\t\tif (Array.isArray(oldValue)) {\n\t\t\t\toldValue = [].concat(_toConsumableArray(oldValue));\n\t\t\t} else if ((typeof oldValue === 'undefined' ? 'undefined' : _typeof(oldValue)) == 'object' && oldValue) {\n\t\t\t\toldValue = Object.assign({}, oldValue);\n\t\t\t}\n\t\t\t//设置值\n\t\t\tReflect.set(target, property, value);\n\t\t\t//如果属性变化\n\t\t\tif (oldValue !== value) {\n\t\t\t\t//触发beforeUpdate生命周期函数\n\t\t\t\tif (typeof this.onBeforeUpdate == 'function') {\n\t\t\t\t\tthis.onBeforeUpdate.apply(this.$data, [property, value, oldValue, target]);\n\t\t\t\t}\n\t\t\t\t//更新虚拟节点\n\t\t\t\tthis._updateVnodes(keys, value, oldValue);\n\t\t\t\t//针对修改对象或者数组内部元素，触发对数组或者对象的监听\n\t\t\t\tvar key1 = parentKeys.join('.');\n\t\t\t\tif (oldTarget && parentKeys.length && this.$watchers[key1]) {\n\t\t\t\t\tthis.$watchers[key1].apply(this, [target, oldTarget]);\n\t\t\t\t}\n\t\t\t\t//针对直接属性触发监听\n\t\t\t\tvar key2 = keys.join('.');\n\t\t\t\tif (this.$watchers[key2]) {\n\t\t\t\t\tthis.$watchers[key2].apply(this, [value, oldValue]);\n\t\t\t\t}\n\t\t\t\t//触发updated生命周期函数\n\t\t\t\tif (typeof this.onUpdated == 'function') {\n\t\t\t\t\tthis.onUpdated.apply(this.$data, [property, value, oldValue, target]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t/**\r\n   * 解析指定的监听属性字符串为特定格式字符串\r\n   * @param {String} property 解析的属性字符串\r\n   */\n\n\t}, {\n\t\tkey: '_parseProperty',\n\t\tvalue: function _parseProperty(property) {\n\t\t\tvar properties = [];\n\t\t\tproperty.split('.').forEach(function (prop) {\n\t\t\t\tvar matchArray = prop.match(/\\[(.+?)\\]/g);\n\t\t\t\tif (matchArray) {\n\t\t\t\t\tvar newProp = prop.replace(/\\[(.+?)\\]/g, '');\n\t\t\t\t\tproperties.push(newProp);\n\t\t\t\t\tmatchArray.forEach(function (match) {\n\t\t\t\t\t\tproperties.push(match.substr(1, match.length - 2));\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tproperties.push(prop);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn properties.join('.');\n\t\t}\n\n\t\t/**\r\n   * 判断数据是否为对象\r\n   * @param {Object} data\r\n   */\n\n\t}, {\n\t\tkey: '_isObject',\n\t\tvalue: function _isObject(data) {\n\t\t\tif ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) == 'object' && data) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\r\n   * 获取原始对象\r\n   * @param {Object} data\r\n   */\n\n\t}, {\n\t\tkey: '_getOriginalData',\n\t\tvalue: function _getOriginalData(data) {\n\t\t\tvar res = null;\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tres = [];\n\t\t\t\tvar _iteratorNormalCompletion4 = true;\n\t\t\t\tvar _didIteratorError4 = false;\n\t\t\t\tvar _iteratorError4 = undefined;\n\n\t\t\t\ttry {\n\t\t\t\t\tfor (var _iterator4 = data[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t\t\t\t\t\tvar item = _step4.value;\n\n\t\t\t\t\t\tvar el = this._getOriginalData(item);\n\t\t\t\t\t\tres.push(el);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\t_didIteratorError4 = true;\n\t\t\t\t\t_iteratorError4 = err;\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t\t\t\t\t\t\t_iterator4.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif (_didIteratorError4) {\n\t\t\t\t\t\t\tthrow _iteratorError4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (this._isObject(data)) {\n\t\t\t\tres = {};\n\t\t\t\tfor (var key in data) {\n\t\t\t\t\tvar _el = this._getOriginalData(data[key]);\n\t\t\t\t\tres[key] = _el;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tres = data;\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t}]);\n\n\treturn State;\n}();\n\nmodule.exports = State;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n//改变$data内的对应字段值\nvar parse = function parse($data, vnode, exp, val) {\n\tif ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {\n\t\tval = JSON.stringify(val);\n\t} else {\n\t\tval = String(val);\n\t}\n\ttry {\n\t\tvar forData = vnode.getForData();\n\t\tvar forRes = vnode.getForRes();\n\t\t//使用forData作为作用域解析表达式\n\t\tvar res = vnode.parseExpression(forData, exp);\n\t\tvar a = '';\n\t\tvar _iteratorNormalCompletion = true;\n\t\tvar _didIteratorError = false;\n\t\tvar _iteratorError = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator = forRes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\tvar fr = _step.value;\n\n\t\t\t\tvar forExpRes = vnode.parseExpression(scope, fr.exp);\n\t\t\t\tif (Array.isArray(forExpRes)) {\n\t\t\t\t\tvar index = forData[fr.index];\n\t\t\t\t\ta += fr.exp + '[\"' + index + '\"]';\n\t\t\t\t} else if ((typeof forExpRes === 'undefined' ? 'undefined' : _typeof(forExpRes)) == 'object' && forExpRes) {\n\t\t\t\t\tvar key = forData[fr.key];\n\t\t\t\t\ta += fr.exp + '[\"' + key + '\"]';\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError = true;\n\t\t\t_iteratorError = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t_iterator.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(a);\n\n\t\t// const match = /(.+?)(\\[|\\.)/g.exec(exp)\n\t\t// let appendExp = ''\n\t\t// if(match){\n\t\t// \tappendExp = exp.substring(match[1].length)\n\t\t// }\n\t\t// let scope = Object.assign({},$data)\n\t\t// Object.assign(scope,forData)\n\t\t// let forExpRes = vnode.parseExpression(scope,forRes.exp)\n\t\t// if(Array.isArray(forExpRes)){\n\t\t// \tlet index = forData[forRes.index]\n\t\t// \tlet h = vnode.executeExpression($data,`${forRes.exp}[${index}]${appendExp}=${val}`)\n\t\t// \th($data)\n\t\t// }else if(typeof forExpRes == 'object' && forExpRes){\n\t\t// \tlet key = forData[forRes.key]\n\t\t// \tlet h = vnode.executeExpression($data,`${forRes.exp}[\"${key}\"]${appendExp}=${val}`)\n\t\t// \th($data)\n\t\t// }\n\t}\n\t//解析失败表示表达式作用域为$data\n\tcatch (e) {\n\t\tvar h = vnode.executeExpression($data, exp + '=' + val);\n\t\th($data);\n\t}\n};\n\nmodule.exports = {\n\t//定义show指令\n\tshow: {\n\t\tmounted: function mounted(el, value) {\n\t\t\tif (!value) {\n\t\t\t\tel.style.display = 'none';\n\t\t\t}\n\t\t},\n\t\tupdated: function updated(el, value) {\n\t\t\tif (value) {\n\t\t\t\tel.style.display = '';\n\t\t\t} else {\n\t\t\t\tel.style.display = 'none';\n\t\t\t}\n\t\t}\n\t},\n\tmodel: {\n\t\tmounted: function mounted(el, value, modifier, exp, vnode) {\n\t\t\tvar _this = this;\n\n\t\t\t//input标签的双向绑定\n\t\t\tif (el.nodeName == 'INPUT') {\n\t\t\t\t//复选框实现双向绑定\n\t\t\t\tif (el.getAttribute('type') == 'checkbox') {\n\t\t\t\t\t//布尔类型\n\t\t\t\t\tif (typeof value == 'boolean') {\n\t\t\t\t\t\tel.checked = value;\n\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\tvar val = vnode.attrs.value;\n\t\t\t\t\t\tel.checked = value.includes(val);\n\t\t\t\t\t}\n\t\t\t\t\tel.addEventListener('change', function (e) {\n\t\t\t\t\t\tvar checked = e.currentTarget.checked;\n\t\t\t\t\t\tvar val = vnode.attrs.value;\n\t\t\t\t\t\tif (typeof value == 'boolean') {\n\t\t\t\t\t\t\tparse(_this, vnode, exp, checked);\n\t\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\t\tvar _scope = Object.assign({}, _this);\n\t\t\t\t\t\t\tObject.assign(_scope, vnode.getForData());\n\t\t\t\t\t\t\tvar arr = vnode.parseExpression(_scope, exp);\n\t\t\t\t\t\t\tif (checked) {\n\t\t\t\t\t\t\t\tarr.push(val);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tarr = arr.filter(function (item, index) {\n\t\t\t\t\t\t\t\t\treturn JSON.stringify(item) != JSON.stringify(val);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparse(_this, vnode, exp, arr);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tupdated: function updated(el, value, modifier, exp, vnode) {\n\t\t\tif (el.nodeName == 'INPUT') {\n\t\t\t\tif (el.getAttribute('type') == 'checkbox') {\n\t\t\t\t\tif (typeof value == 'boolean') {\n\t\t\t\t\t\tel.checked = value;\n\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\tvar val = vnode.attrs.value;\n\t\t\t\t\t\tel.checked = value.includes(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")}])});